$date
	Wed Jan  6 16:28:44 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module ProcTest_v $end
$var wire 32 ! instruction [31:0] $end
$var wire 32 " first_instruction [31:0] $end
$var wire 64 # currentPC [63:0] $end
$var wire 64 $ WB_data [63:0] $end
$var reg 1 % CLK $end
$var reg 8 & ClkNum [7:0] $end
$var reg 1 ' Reset_L $end
$var reg 8 ( passed [7:0] $end
$var reg 64 ) startPC [63:0] $end
$var reg 16 * watchdog [15:0] $end
$scope module uut $end
$var wire 1 % CLK $end
$var wire 1 ' resetl $end
$var wire 64 + startpc [63:0] $end
$var wire 1 , zero $end
$var wire 1 - uncond_branch $end
$var wire 3 . signop [2:0] $end
$var wire 5 / rn [4:0] $end
$var wire 5 0 rm [4:0] $end
$var wire 1 1 regwrite $end
$var wire 64 2 regoutB [63:0] $end
$var wire 64 3 regoutA [63:0] $end
$var wire 1 4 reg2loc $end
$var wire 5 5 rd [4:0] $end
$var wire 11 6 opcode [10:0] $end
$var wire 64 7 nextPC [63:0] $end
$var wire 1 8 memwrite $end
$var wire 1 9 memread $end
$var wire 1 : mem2reg $end
$var wire 32 ; instruction [31:0] $end
$var wire 64 < extimm [63:0] $end
$var wire 64 = dmemout [63:0] $end
$var wire 1 > branch $end
$var wire 1 ? alusrc $end
$var wire 64 @ aluout [63:0] $end
$var wire 4 A aluctrl [3:0] $end
$var wire 64 B WB_data [63:0] $end
$var wire 1 C PC_WriteEn $end
$var wire 1 D IFID_WriteEn $end
$var wire 2 E ForwardB [1:0] $end
$var wire 2 F ForwardA [1:0] $end
$var wire 1 G Control_Sel $end
$var wire 1 H BranchPC $end
$var wire 64 I ALUinB [63:0] $end
$var wire 64 J ALUinA [63:0] $end
$var wire 64 K ALUB_in1_choice [63:0] $end
$var reg 64 L EXMEM_ALUout [63:0] $end
$var reg 4 M EXMEM_M [3:0] $end
$var reg 64 N EXMEM_PC [63:0] $end
$var reg 2 O EXMEM_WB [1:0] $end
$var reg 5 P EXMEM_WReg [4:0] $end
$var reg 1 Q EXMEM_Zero $end
$var reg 64 R EXMEM_rDataB [63:0] $end
$var reg 11 S IDEX_ALUfield [10:0] $end
$var reg 1 T IDEX_ALUop $end
$var reg 4 U IDEX_EX [3:0] $end
$var reg 4 V IDEX_M [3:0] $end
$var reg 64 W IDEX_PC [63:0] $end
$var reg 64 X IDEX_SignExtender [63:0] $end
$var reg 2 Y IDEX_WB [1:0] $end
$var reg 5 Z IDEX_WReg [4:0] $end
$var reg 64 [ IDEX_rDataA [63:0] $end
$var reg 64 \ IDEX_rDataB [63:0] $end
$var reg 5 ] IDEX_rm [4:0] $end
$var reg 5 ^ IDEX_rn [4:0] $end
$var reg 64 _ IFID_PC [63:0] $end
$var reg 32 ` IFID_instruction [31:0] $end
$var reg 32 a IFID_instruction_debug [31:0] $end
$var reg 64 b MEMWB_ALUout [63:0] $end
$var reg 2 c MEMWB_WB [1:0] $end
$var reg 5 d MEMWB_WReg [4:0] $end
$var reg 64 e MEMWB_rData [63:0] $end
$var reg 64 f currentpc [63:0] $end
$var reg 32 g instructionOut [31:0] $end
$scope module ALU $end
$var wire 4 h ALUCtrl [3:0] $end
$var wire 1 % Clk $end
$var wire 1 , Zero $end
$var wire 64 i BusB [63:0] $end
$var wire 64 j BusA [63:0] $end
$var reg 64 k BusW [63:0] $end
$upscope $end
$scope module ALUA $end
$var wire 1 % Clk $end
$var wire 1 l en $end
$var wire 64 m in1 [63:0] $end
$var wire 64 n in3 [63:0] $end
$var wire 64 o in2 [63:0] $end
$var wire 2 p ctrl [1:0] $end
$var reg 64 q out [63:0] $end
$upscope $end
$scope module ALUB $end
$var wire 1 % Clk $end
$var wire 1 r en $end
$var wire 64 s in1 [63:0] $end
$var wire 64 t in3 [63:0] $end
$var wire 64 u in2 [63:0] $end
$var wire 2 v ctrl [1:0] $end
$var reg 64 w out [63:0] $end
$upscope $end
$scope module ALUB_in1_src $end
$var wire 1 T ctrl $end
$var wire 64 x in1 [63:0] $end
$var wire 64 y in2 [63:0] $end
$var reg 64 z out [63:0] $end
$upscope $end
$scope module DataMemory $end
$var wire 64 { Address [63:0] $end
$var wire 1 % Clock $end
$var wire 1 | MemoryRead $end
$var wire 1 } MemoryWrite $end
$var wire 64 ~ WriteData [63:0] $end
$var reg 64 !" ReadData [63:0] $end
$scope task initset $end
$var reg 64 "" addr [63:0] $end
$var reg 64 #" data [63:0] $end
$upscope $end
$upscope $end
$scope module FU $end
$var wire 1 % Clk $end
$var wire 1 $" EXMEM_RegWrite $end
$var wire 5 %" EXMEM_WriteRegister [4:0] $end
$var wire 5 &" IDEX_rm [4:0] $end
$var wire 5 '" IDEX_rn [4:0] $end
$var wire 1 (" MEMWB_RegWrite $end
$var wire 5 )" MEMWB_WriteRegister [4:0] $end
$var reg 2 *" ForwardA [1:0] $end
$var reg 2 +" ForwardB [1:0] $end
$upscope $end
$scope module Memory_WB_Mux $end
$var wire 1 ," ctrl $end
$var wire 64 -" in1 [63:0] $end
$var wire 64 ." in2 [63:0] $end
$var reg 64 /" out [63:0] $end
$upscope $end
$scope module PCLogic $end
$var wire 1 Q ALUZero $end
$var wire 1 0" Branch $end
$var wire 64 1" CurrPC [63:0] $end
$var wire 64 2" SignExtImm64 [63:0] $end
$var wire 1 3" Unconditional $end
$var wire 1 C WriteEn $end
$var reg 64 4" NextPC [63:0] $end
$upscope $end
$scope module RegisterFile $end
$var wire 64 5" BusW [63:0] $end
$var wire 1 % Clk $end
$var wire 5 6" RA [4:0] $end
$var wire 5 7" RB [4:0] $end
$var wire 5 8" RW [4:0] $end
$var wire 1 9" RegWr $end
$var wire 64 :" BusB [63:0] $end
$var wire 64 ;" BusA [63:0] $end
$var integer 32 <" i [31:0] $end
$upscope $end
$scope module SignExtender $end
$var wire 1 % Clk $end
$var wire 26 =" Imm26 [25:0] $end
$var wire 2 >" shift [1:0] $end
$var wire 3 ?" Ctrl [2:0] $end
$var reg 64 @" BusImm [63:0] $end
$upscope $end
$scope module branchPC $end
$var wire 1 % Clk $end
$var wire 64 A" CurrentPC [63:0] $end
$var wire 64 B" ExtendedImm [63:0] $end
$var reg 1 H BranchPC $end
$upscope $end
$scope module control $end
$var wire 1 % Clk $end
$var wire 11 C" opcode [10:0] $end
$var reg 4 D" aluop [3:0] $end
$var reg 1 ? alusrc $end
$var reg 1 > branch $end
$var reg 1 : mem2reg $end
$var reg 1 9 memread $end
$var reg 1 8 memwrite $end
$var reg 1 4 reg2loc $end
$var reg 1 1 regwrite $end
$var reg 3 E" signop [2:0] $end
$var reg 1 - uncond_branch $end
$upscope $end
$scope module hdu $end
$var wire 1 % Clk $end
$var wire 1 F" IDEX_MemRead $end
$var wire 5 G" IDEX_rd [4:0] $end
$var wire 5 H" IFID_rd [4:0] $end
$var wire 5 I" IFID_rm [4:0] $end
$var wire 5 J" IFID_rn [4:0] $end
$var reg 1 D IFID_WriteEn $end
$var reg 1 C PC_WriteEn $end
$var reg 1 G Stall_flush $end
$upscope $end
$scope module imem $end
$var wire 64 K" Address [63:0] $end
$var reg 32 L" Data [31:0] $end
$upscope $end
$upscope $end
$scope task allPassed $end
$var reg 8 M" numTests [7:0] $end
$var reg 8 N" passed [7:0] $end
$upscope $end
$scope task passTest $end
$var reg 64 O" actualOut [63:0] $end
$var reg 64 P" expectedOut [63:0] $end
$var reg 8 Q" passed [7:0] $end
$var reg 257 R" testType [256:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx R"
bx Q"
bx P"
bx O"
bx N"
bx M"
bx L"
bx K"
bx J"
bx I"
bx H"
bx G"
xF"
bx E"
bx D"
bx C"
bx B"
bx A"
b0 @"
bx ?"
bx >"
bx ="
b1000000 <"
bx ;"
bx :"
x9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
x3"
bx 2"
bx 1"
x0"
bx /"
bx ."
bx -"
x,"
bx +"
bx *"
bx )"
x("
bx '"
bx &"
bx %"
x$"
b0 #"
b100000 ""
bx !"
bx ~
x}
x|
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
1r
bx q
bx p
bx o
bx n
bx m
0l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
xT
bx S
bx R
xQ
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
xH
xG
bx F
bx E
xD
xC
bx B
bx A
bx @
x?
x>
bx =
b0 <
bx ;
x:
x9
x8
bx 7
bx 6
bx 5
x4
bx 3
bx 2
x1
bx 0
bx /
bx .
x-
x,
b0 +
b0 *
b0 )
b0 (
1'
b0 &
0%
bx $
bx #
bx "
bx !
$end
#60000
0F"
0G
1D
1C
b0x N
b0x 2"
b0 X
b0 y
b0 B"
b0 U
b0 h
bx000 V
b0 Z
b0 G"
0T
b0 Y
1%
#120000
b1 *
b1 &
0%
#121000
0'
#180000
1%
#240000
b10010001000000000000001111100001 ;
b10010001000000000000001111100001 L"
b0 #
b0 f
b0 K"
b10 *
b10 &
0%
#241000
1'
#300000
b0 .
b0 ?"
b0 E"
b10 A
b10 D"
0-
0>
08
09
11
0:
1?
04
b0 2
b0 :"
b0 3
b0 ;"
b1 /
b1 7"
b1 J"
b0 >"
b0x E
b0x v
b0x +"
b0x F
b0x p
b0x *"
0|
0}
00"
0$"
xF"
b1 5
b1 H"
b11111 0
b11111 6"
b11111 I"
b10010001000 6
b10010001000 C"
b1000000000000001111100001 ="
b100 7
b100 4"
b0 P
b0 %"
b0x N
b0x 2"
bx000 M
b0 O
b10010001000 S
bx U
bx h
bx V
bx Z
bx G"
xT
bx Y
b10010001000000000000001111100001 "
b10010001000000000000001111100001 a
b10010001000000000000001111100001 `
b0 _
b0 1"
1%
#360000
b10010001000000000000011111100010 ;
b10010001000000000000011111100010 L"
b10010001000000000000001111100001 !
b10010001000000000000001111100001 g
b100 #
b100 f
b100 K"
b11 *
b11 &
0%
#420000
1,
b0 @
b0 k
b0 K
b0 w
b0 x
b0 J
b0 j
b0 q
b0 I
b0 i
b0 z
b10 /
b10 7"
b10 J"
0("
09"
0,"
x|
x}
x0"
x$"
bx0 E
bx0 v
bx0 +"
bx0 F
bx0 p
bx0 *"
0F"
b10 5
b10 H"
b1000000000000011111100010 ="
b1000 7
b1000 4"
b0 d
b0 )"
b0 8"
b0 c
bx P
bx %"
b0x N
b0x 2"
bx M
bx O
b1 ^
b1 '"
b11111 ]
b11111 &"
b0 \
b0 s
b0 [
b0 m
b0 W
b0 A"
b10 U
b10 h
b0 V
b1 Z
b1 G"
1T
b1 Y
b10010001000000000000011111100010 "
b10010001000000000000011111100010 a
b10010001000000000000011111100010 `
b100 _
b100 1"
1%
#480000
b10001011000000100000000000100001 ;
b10001011000000100000000000100001 L"
b10010001000000000000011111100010 !
b10010001000000000000011111100010 g
b1000 #
b1000 f
b1000 K"
b1 <
b1 @"
b100 *
b100 &
0%
#540000
0,
b1 @
b1 k
0?
b1 I
b1 i
b1 z
x("
x9"
x,"
0|
0}
00"
03"
1$"
b0x E
b0x v
b0x +"
b0x F
b0x p
b0x *"
b1 5
b1 H"
b1 0
b1 6"
b1 I"
b10001011000 6
b10001011000 C"
b11000000100000000000100001 ="
b1100 7
b1100 4"
0H
bx d
bx )"
bx 8"
bx c
b1 P
b1 %"
b0 R
b0 ~
b0 L
b0 n
b0 t
b0 {
1Q
b0x N
b0x 2"
b0 M
b1 O
b10 ^
b10 '"
b10001011000 S
b1 X
b1 y
b1 B"
b100 W
b100 A"
b10 Z
b10 G"
b10001011000000100000000000100001 "
b10001011000000100000000000100001 a
b10001011000000100000000000100001 `
b1000 _
b1000 1"
1%
#600000
b10001011000000100000000000100010 ;
b10001011000000100000000000100010 L"
b10001011000000100000000000100001 !
b10001011000000100000000000100001 g
b1100 #
b1100 f
b1100 K"
b10000000 <
b10000000 @"
b101 *
b101 &
0%
#660000
0,
b1 @
b1 k
b0 J
b0 j
b0 q
b0 $
b0 B
b0 o
b0 u
b0 /"
b0 5"
b1 K
b1 w
b1 x
b1 I
b1 i
b1 z
b1 F
b1 p
b1 *"
1("
19"
0,"
b10 E
b10 v
b10 +"
b10 5
b10 H"
b11000000100000000000100010 ="
b10000 7
b10000 4"
b1 d
b1 )"
b1 8"
b0 b
b0 -"
b1 c
b10 P
b10 %"
b1 L
b1 n
b1 t
b1 {
0Q
b0 N
b0 2"
b1 ]
b1 &"
b10000000 X
b10000000 y
b10000000 B"
b1000 W
b1000 A"
b1 Z
b1 G"
0T
b10001011000000100000000000100010 "
b10001011000000100000000000100010 a
b10001011000000100000000000100010 `
b1100 _
b1100 1"
1%
#720000
b10001011000000100000000000100001 ;
b10001011000000100000000000100001 L"
b10001011000000100000000000100010 !
b10001011000000100000000000100010 g
b10000 #
b10000 f
b10000 K"
b110 *
b110 &
0%
#780000
b1 I
b1 i
b1 z
b10 @
b10 k
b1 K
b1 w
b1 x
b1 J
b1 j
b1 q
b1 $
b1 B
b1 o
b1 u
b1 /"
b1 5"
b1 E
b1 v
b1 +"
b10 F
b10 p
b10 *"
b1 5
b1 H"
b11000000100000000000100001 ="
b10100 7
b10100 4"
b10 d
b10 )"
b10 8"
b1 b
b1 -"
b1 P
b1 %"
b0 N
b0 2"
b1100 W
b1100 A"
b10 Z
b10 G"
b10001011000000100000000000100001 "
b10001011000000100000000000100001 a
b10001011000000100000000000100001 `
b10000 _
b10000 1"
1%
#840000
b10001011000000100000000000100010 ;
b10001011000000100000000000100010 L"
b10001011000000100000000000100001 !
b10001011000000100000000000100001 g
b10100 #
b10100 f
b10100 K"
b111 *
b111 &
0%
#841000
b1 2
b1 :"
#900000
b11 @
b11 k
b10 I
b10 i
b10 z
b10 K
b10 w
b10 x
b1 J
b1 j
b1 q
b10 E
b10 v
b10 +"
b1 F
b1 p
b1 *"
b10 5
b10 H"
b11000000100000000000100010 ="
b11000 7
b11000 4"
b1 d
b1 )"
b1 8"
b10 P
b10 %"
b10 L
b10 n
b10 t
b10 {
b0 N
b0 2"
b1 \
b1 s
b10000 W
b10000 A"
b1 Z
b1 G"
b10001011000000100000000000100010 "
b10001011000000100000000000100010 a
b10001011000000100000000000100010 `
b10100 _
b10100 1"
1%
#960000
b10001011000000100000000000100001 ;
b10001011000000100000000000100001 L"
b10001011000000100000000000100010 !
b10001011000000100000000000100010 g
b11000 #
b11000 f
b11000 K"
b1000 *
b1000 &
0%
#961000
b1 3
b1 ;"
#1020000
b101 @
b101 k
b10 I
b10 i
b10 z
b11 J
b11 j
b11 q
b10 $
b10 B
b10 o
b10 u
b10 /"
b10 5"
b10 K
b10 w
b10 x
b1 E
b1 v
b1 +"
b10 F
b10 p
b10 *"
b1 5
b1 H"
b11000000100000000000100001 ="
b11100 7
b11100 4"
b10 d
b10 )"
b10 8"
b10 b
b10 -"
b1 P
b1 %"
b1 R
b1 ~
b11 L
b11 n
b11 t
b11 {
b0 N
b0 2"
b1 [
b1 m
b10100 W
b10100 A"
b10 Z
b10 G"
b10001011000000100000000000100001 "
b10001011000000100000000000100001 a
b10001011000000100000000000100001 `
b11000 _
b11000 1"
1%
#1080000
b10001011000000100000000000100010 ;
b10001011000000100000000000100010 L"
b10001011000000100000000000100001 !
b10001011000000100000000000100001 g
b11100 #
b11100 f
b11100 K"
b1001 *
b1001 &
0%
#1081000
b10 2
b10 :"
#1140000
b101 I
b101 i
b101 z
b1000 @
b1000 k
b101 K
b101 w
b101 x
b11 $
b11 B
b11 o
b11 u
b11 /"
b11 5"
b11 J
b11 j
b11 q
b10 E
b10 v
b10 +"
b1 F
b1 p
b1 *"
b10 5
b10 H"
b11000000100000000000100010 ="
b100000 7
b100000 4"
b1 d
b1 )"
b1 8"
b11 b
b11 -"
b10 P
b10 %"
b101 L
b101 n
b101 t
b101 {
b0 N
b0 2"
b10 \
b10 s
b11000 W
b11000 A"
b1 Z
b1 G"
b10001011000000100000000000100010 "
b10001011000000100000000000100010 a
b10001011000000100000000000100010 `
b11100 _
b11100 1"
1%
#1200000
b10001011000000100000000000100001 ;
b10001011000000100000000000100001 L"
b10001011000000100000000000100010 !
b10001011000000100000000000100010 g
b100000 #
b100000 f
b100000 K"
b1010 *
b1010 &
0%
#1201000
b11 3
b11 ;"
#1260000
b1101 @
b1101 k
b101 I
b101 i
b101 z
b1000 J
b1000 j
b1000 q
b101 $
b101 B
b101 o
b101 u
b101 /"
b101 5"
b101 K
b101 w
b101 x
b1 E
b1 v
b1 +"
b10 F
b10 p
b10 *"
b1 5
b1 H"
b11000000100000000000100001 ="
b100100 7
b100100 4"
b10 d
b10 )"
b10 8"
b101 b
b101 -"
b1 P
b1 %"
b10 R
b10 ~
b1000 L
b1000 n
b1000 t
b1000 {
b0 N
b0 2"
b11 [
b11 m
b11100 W
b11100 A"
b10 Z
b10 G"
b10001011000000100000000000100001 "
b10001011000000100000000000100001 a
b10001011000000100000000000100001 `
b100000 _
b100000 1"
1%
#1320000
b10001011000000100000000000100010 ;
b10001011000000100000000000100010 L"
b10001011000000100000000000100001 !
b10001011000000100000000000100001 g
b100100 #
b100100 f
b100100 K"
b1011 *
b1011 &
0%
#1321000
b101 2
b101 :"
#1380000
b1101 I
b1101 i
b1101 z
b10101 @
b10101 k
b1101 K
b1101 w
b1101 x
b1000 $
b1000 B
b1000 o
b1000 u
b1000 /"
b1000 5"
b1000 J
b1000 j
b1000 q
b10 E
b10 v
b10 +"
b1 F
b1 p
b1 *"
b10 5
b10 H"
b11000000100000000000100010 ="
b101000 7
b101000 4"
b1 d
b1 )"
b1 8"
b1000 b
b1000 -"
b10 P
b10 %"
b1101 L
b1101 n
b1101 t
b1101 {
b0 N
b0 2"
b101 \
b101 s
b100000 W
b100000 A"
b1 Z
b1 G"
b10001011000000100000000000100010 "
b10001011000000100000000000100010 a
b10001011000000100000000000100010 `
b100100 _
b100100 1"
1%
#1440000
bx ;
bx L"
b10001011000000100000000000100010 !
b10001011000000100000000000100010 g
b101000 #
b101000 f
b101000 K"
b1100 *
b1100 &
0%
#1441000
b1000 3
b1000 ;"
#1500000
b100010 @
b100010 k
b1101 I
b1101 i
b1101 z
b10101 J
b10101 j
b10101 q
b0 A
b0 D"
b1101 $
b1101 B
b1101 o
b1101 u
b1101 /"
b1101 5"
b1101 K
b1101 w
b1101 x
bx 2
bx :"
bx 3
bx ;"
bx /
bx 7"
bx J"
bx >"
b1 E
b1 v
b1 +"
b10 F
b10 p
b10 *"
bx 5
bx H"
bx 0
bx 6"
bx I"
bx 6
bx C"
bx ="
b101100 7
b101100 4"
b10 d
b10 )"
b10 8"
b1101 b
b1101 -"
b1 P
b1 %"
b101 R
b101 ~
b10101 L
b10101 n
b10101 t
b10101 {
b0 N
b0 2"
bx S
b1000 [
b1000 m
b100100 W
b100100 A"
b10 Z
b10 G"
bx "
bx a
bx `
b101000 _
b101000 1"
1%
#1560000
bx !
bx g
b101100 #
b101100 f
b101100 K"
bx <
bx @"
b1101 *
b1101 &
0%
#1620000
1,
b10101 $
b10101 B
b10101 o
b10101 u
b10101 /"
b10101 5"
b100010 J
b100010 j
b100010 q
b0 @
b0 k
bx E
bx v
bx +"
bx F
bx p
bx *"
b110000 7
b110000 4"
b1 d
b1 )"
b1 8"
b10101 b
b10101 -"
b10 P
b10 %"
b100010 L
b100010 n
b100010 t
b100010 {
b0 N
b0 2"
bx ^
bx '"
bx ]
bx &"
bx X
bx y
bx B"
bx \
bx s
bx [
bx m
b101000 W
b101000 A"
b0 U
b0 h
bx Z
bx G"
b101100 _
b101100 1"
1%
#1680000
b110000 #
b110000 f
b110000 K"
b1110 *
b1110 &
0%
#1740000
b100010 $
b100010 B
b100010 o
b100010 u
b100010 /"
b100010 5"
b110100 7
b110100 4"
xH
b10 d
b10 )"
b10 8"
b100010 b
b100010 -"
bx P
bx %"
bx R
bx ~
b0 L
b0 n
b0 t
b0 {
1Q
b0 N
b0 2"
b101100 W
b101100 A"
b110000 _
b110000 1"
1%
#1800000
b110100 #
b110100 f
b110100 K"
b1111 *
b1111 &
0%
#1860000
b0 $
b0 B
b0 o
b0 u
b0 /"
b0 5"
b111000 7
b111000 4"
bx d
bx )"
bx 8"
b0 b
b0 -"
b0x N
b0x 2"
b110000 W
b110000 A"
b110100 _
b110100 1"
1%
#1920000
b111000 #
b111000 f
b111000 K"
b10000 *
b10000 &
0%
#1921000
